# -*- coding: utf-8 -*-
"""numberrecognitiondeeplearning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V_Gx8PpCm4CpsZhTHIxeZXycLo7Moxf5
"""

import tensorflow as tf
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.models import Sequential
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.datasets import mnist
import numpy as np
import tkinter as tk
from PIL import Image, ImageDraw

print(mnist)

(xtrain, ytrain), (xtest, ytest)= mnist.load_data()
xtrain =xtrain/255.0
xtest =xtest/255.0
ytrain = to_categorical(ytrain, num_classes=10)
ytest = to_categorical(ytest, 10)

model = Sequential([
    Flatten(input_shape = (28, 28)),
    Dense(128, activation= 'relu'),
    Dense(64, activation = 'relu'),
    Dense(10, activation= 'softmax')]

)

model.compile(optimizer = "adam", loss = "categorical_crossentropy", metrics = ["accuracy"])
model.fit(xtrain, ytrain, epochs = 5, batch_size = 32, validation_data = (xtest, ytest))

preds = model.predict(xtest)
predictions = np.argmax(preds, axis = 1)
trueclasses = np.argmax(ytest, axis = 1)
for i in range(5):
  print(f"Predicted : {predictions[i]}, True : {trueclasses[i]}" )

from tkinter import *
class Digitrecognizer:
  def __init__(self,model):
    self.model = model
    self.root = Tk()
    self.root.geometry('600x400')
    self.root.title('Number Recognition')
    self.root.config(bg='pink')

    self.titl = Label(self.root, text='Drawing', font=('Courier New', 20, 'bold'), fg='black', bg='white')
    self.titl.pack()

    self.canvas1 = Canvas(self.root, width=300, height=200)
    self.canvas1.config(bg='white')
    self.canvas1.place(x=50, y=50)

    self.canvas1.bind("<B1-Motion>", self.draw)

    self.direct = Label(self.root, text='Draw a digit', font=('Courier New', 15, 'bold'), fg='brown')
    self.direct.place(x = 400, y= 100)
  

    self.btn4=Button(self.root, text='Clear', command= self.clearcanvas)
    self.btn4.place(x=50, y=300)

    self.btn4=Button(self.root, text='Predict', command = self.predict)
    self.btn4.place(x=200, y=300)

    self.img = Image.new("L",(300, 200), color = "white")
    self.drawing = ImageDraw.Draw(self.img)
    self.root.mainloop()

  def draw(self, event):
    x, y = event.x, event.y
    self.canvas1.create_oval(x-8,y-8, x+8, y+8, fill = "black", width =8)
    self.drawing.ellipse([x-8,y-8, x+8, y+8], fill = "black")
  
  def clearcanvas(self):
    self.canvas.delete("all")
    self.img = Image.new("L",(300, 200), color = "white")
    self.drawing = ImageDraw.Draw(self.img)
  
  def predict(self):
    resized = np.array(self.img.resize((28, 28)))
    resized = resized/255
    resized = np.expand_dims(resized, axis = 0)
    prediction = self.model.predict(resized)
    digit = np.argmax(prediction)
    self.direct.config(text = f"You drew a {digit}")
  

    


app = Digitrecognizer(model)

